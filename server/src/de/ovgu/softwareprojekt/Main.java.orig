package de.ovgu.softwareprojekt;

<<<<<<< HEAD
import de.ovgu.softwareprojekt.control.CommandConnection;
import de.ovgu.softwareprojekt.control.CommandSource;
import de.ovgu.softwareprojekt.control.commands.Command;
import de.ovgu.softwareprojekt.discovery.DiscoveryServer;

import java.io.IOException;

public class Main {

    public static void main(String[] args) throws IOException {
        // because of interface restrictions (eg CommandSource.OnCommandListener), we must work within a class
        Server server = new Server();
    }

    private static class Server implements CommandSource.OnCommandListener {
        Server() throws IOException {
            // TODO: the command connection
            CommandConnection commandConnection = new CommandConnection();
            commandConnection.setCommandListener(this);
            commandConnection.start();

            System.out.println("listening for commands on " + commandConnection.getLocalPort());

            // look at the docs
            DiscoveryServer discoveryServer = new DiscoveryServer(8888, commandConnection.getLocalPort(), 8890, "lessig. _christian_ lessig");
            discoveryServer.start();

            System.out.println("discovery server started");
        }

        @Override
        public void onCommand(Command command) {
            System.out.println("command received, type " + command.getCommandType().toString());
        }
=======
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.net.DatagramPacket;
import java.net.DatagramSocket;
import java.net.InetSocketAddress;
import java.net.SocketException;

public class Main {

    public static void main(String[] args) throws IOException, ClassNotFoundException {
	// write your code here
        DatagramSocket serverSocket = new DatagramSocket(null);
        serverSocket.setReuseAddress(true);
        serverSocket.bind(new InetSocketAddress(25456));
        boolean connected = false;

        try {
            // create result csv, write header

            // storage for udp data
            byte[] appData = new byte[1024];

            System.out.println("running UDP server");

            while (true) {
                // receive udp packet
                DatagramPacket appPacket = new DatagramPacket(appData, appData.length);

                serverSocket.receive(appPacket);

                if(connected==false){
                    System.out.println("Connected");
                }

                connected = true;

                // parse incoming SensorData object
                ByteArrayInputStream input = new ByteArrayInputStream(appData);
                ObjectInputStream oinput = new ObjectInputStream(input);
                SensorData sensorData = (SensorData) oinput.readObject();


            }

        } finally {
            serverSocket.close();
        }

>>>>>>> aa84054b5631be74db8cbcdcef1cc73696190465
    }
}
